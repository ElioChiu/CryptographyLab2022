from pycallgraph import PyCallGraph
from pycallgraph.output import GraphvizOutput
from pycallgraph import Config, GlobbingFilter

# S盒变换
s_box = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
         0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
         0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
         0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
         0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
         0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
         0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
         0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
         0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
         0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
         0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
         0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
         0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
         0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
         0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
         0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]

# 逆S盒变换
inv_s_box = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
             0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
             0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
             0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
             0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
             0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
             0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
             0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
             0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
             0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
             0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
             0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
             0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
             0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
             0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
             0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]

# 列混淆矩阵
mix_matrix = [[0x02, 0x03, 0x01, 0x01],
              [0x01, 0x02, 0x03, 0x01],
              [0x01, 0x01, 0x02, 0x03],
              [0x03, 0x01, 0x01, 0x02]]

# 逆列混淆矩阵
inv_mix_matrix = [[0x0E, 0x0B, 0x0D, 0x09],
                  [0x09, 0x0E, 0x0B, 0x0D],
                  [0x0D, 0x09, 0x0E, 0x0B],
                  [0x0B, 0x0D, 0x09, 0x0E]]

# 轮常数
R_con = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]


# GF(2^8)上的乘法
def gf_mul(a, b, poly):
    ans = 0
    while b > 0:
        if b & 0x01 == 0x01:
            ans ^= a
            a <<= 1
        else:
            a <<= 1
        if a & 0x100 == 0x100:
            a ^= poly
            a &= 0xff
        else:
            a &= 0xff
        b >>= 1
    return ans


# AES类
class AES:
    def __init__(self, seed_key: bytes):
        # 轮密钥列表，用于记录N_r + 1个轮密钥，其中round_key[0]用于初始轮密钥加
        self.round_key = self._generate_key(seed_key)

    def _generate_key(self, seed_key: bytes) -> list:
        # 分组长度，AES中为4个字，128比特
        N_b = 4
        # 密钥状态矩阵列数，取决于密钥的长度，AES-128的N_k为4，AES-192的N_k为6，AES-256的N_k为8
        N_k = 4
        # 迭代轮数
        N_r = N_b + N_k + 2
        # 字向量，AES-128中共有44个字向量，其中w[0:4]用于初始轮密钥，以此类推
        w = [0 for i in range(4 * (N_r + 1))]
        # w[0:4]就为种子密钥
        for i in range(N_k):
            w[i] = self._bytes_to_word([seed_key[4 * i], seed_key[4 * i + 1], seed_key[4 * i + 2], seed_key[4 * i + 3]])
        # 其余N_r个扩展密钥的生成方法
        for i in range(N_k, 4 * (N_r + 1)):
            # 将一个字拆分成四个字节
            tmp = self._word_to_bytes(w[i - 1])
            # 若w的下标i是4的倍数
            if i % N_k == 0:
                # 循环左移、s盒变换
                tmp = [s_box[tmp[1]] ^ R_con[i // N_k - 1], s_box[tmp[2]], s_box[tmp[3]], s_box[tmp[0]]]
            tmp = self._bytes_to_word(tmp)
            w[i] = tmp ^ w[i - N_k]
        # 轮密钥矩阵填充，(N_r + 1) 个4*4的矩阵组成的三维数组
        round_key = [[[[0] for i in range(4)] for i in range(4)] for k in range(N_r + 1)]
        for k in range(N_r + 1):
            for i in range(4):
                tmp = self._word_to_bytes(w[4 * k + i])
                for j in range(4):
                    round_key[k][j][i] = tmp[j]
        return round_key

    # 轮函数
    def _round_function(self, state, i, is_decrypt, final_round):
        # 取出轮密钥
        round_key = self.round_key[i]
        # 加密，非末轮，字节代替 -> 行移位 -> 列混淆 -> 轮密钥加
        if not is_decrypt and i < final_round:
            state = self._sub_bytes(state, is_decrypt)
            state = self._shift_rows(state, is_decrypt)
            state = self._mix_columns(state, is_decrypt)
            state = self._add_round_key(state, round_key)
        # 加密，末轮，字节代替 -> 行移位 -> 轮密钥加
        elif not is_decrypt and i == final_round:
            state = self._sub_bytes(state, is_decrypt)
            state = self._shift_rows(state, is_decrypt)
            state = self._add_round_key(state, round_key)
        # 解密，非末轮，行移位 -> 字节代替 -> 轮密钥加 -> 列混淆
        elif is_decrypt and i > 0:
            state = self._shift_rows(state, is_decrypt)
            state = self._sub_bytes(state, is_decrypt)
            state = self._add_round_key(state, round_key)
            state = self._mix_columns(state, is_decrypt)
        # 解密，末轮，行移位 -> 字节代替 -> 轮密钥加
        elif is_decrypt and i == 0:
            state = self._shift_rows(state, is_decrypt)
            state = self._sub_bytes(state, is_decrypt)
            state = self._add_round_key(state, round_key)
        return state

    # 加密
    def encryption(self, plaintext: bytes) -> bytes:
        # 加密轮数
        N_r = 10
        # 明文字节转为状态矩阵
        state = self._bytes_to_state(plaintext)
        # 初始轮密钥加
        state = self._add_round_key(state, self.round_key[0])
        # N_r轮迭代
        for i in range(1, N_r + 1):
            state = self._round_function(state, i, False, N_r)
        # 状态矩阵转为密文字节
        return self._state_to_bytes(state)

    # 解密
    def decryption(self, ciphertext: bytes) -> bytes:
        # 解密轮数
        N_r = 10
        # 密文字节转为状态矩阵
        state = self._bytes_to_state(ciphertext)
        # 初始轮密钥加
        state = self._add_round_key(state, self.round_key[N_r])
        # N_r轮迭代，注意密钥顺序
        for i in range(N_r - 1, -1, -1):
            state = self._round_function(state, i, True, N_r)
        # 状态矩阵转为明文字节
        return self._state_to_bytes(state)

    @staticmethod
    # 将一个字（32bit）拆分成四个字节（8bit）
    def _word_to_bytes(n: int) -> list:
        return [(n >> 24) & 0xff, (n >> 16) & 0xff, (n >> 8) & 0xff, n & 0xff]

    @staticmethod
    # 将四个字节（8bit）合并成一个字（32bit）
    def _bytes_to_word(byte: list) -> int:
        return (byte[0] << 24) | (byte[1] << 16) | (byte[2] << 8) | byte[3]

    @staticmethod
    # 字节转换成状态矩阵
    def _bytes_to_state(byte):
        return [[byte[i + 4 * j] for j in range(4)] for i in range(4)]

    @staticmethod
    # 状态矩阵转换成字节
    def _state_to_bytes(state):
        byte_array = bytearray(16)
        for i in range(4):
            for j in range(4):
                byte_array[i + 4 * j] = state[i][j]
        return bytes(byte_array)

    @staticmethod
    # 轮密钥加
    def _add_round_key(state, key):
        for i in range(4):
            for j in range(4):
                state[i][j] ^= key[i][j]
        return state

    @staticmethod
    # 字节替代S_box
    def _sub_bytes(state, is_decrypt):
        for i in range(4):
            for j in range(4):
                state[i][j] = s_box[state[i][j]] if not is_decrypt else inv_s_box[state[i][j]]
        return state

    @staticmethod
    # 行移位
    def _shift_rows(state, is_decrypt):
        if not is_decrypt:
            state[1] = [state[1][1], state[1][2], state[1][3], state[1][0]]
            state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]]
            state[3] = [state[3][3], state[3][0], state[3][1], state[3][2]]
        else:
            state[1] = [state[1][3], state[1][0], state[1][1], state[1][2]]
            state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]]
            state[3] = [state[3][1], state[3][2], state[3][3], state[3][0]]
        return state

    @staticmethod
    # 列混淆
    def _mix_columns(state, is_decrypt):
        matrix = mix_matrix if not is_decrypt else inv_mix_matrix
        res = [[0 for j in range(4)] for i in range(4)]
        for i in range(4):
            for j in range(4):
                tmp = 0
                for k in range(4):
                    tmp ^= gf_mul(matrix[i][k], state[k][j], poly=0x11b)
                res[i][j] = tmp
        return res


# 入口函数
def entrance():
    # 加密的次数
    while True:
        n = int(input())
        # 输入明密文
        text = bytes.fromhex(input().strip()[2:])
        # 输入种子密钥
        seed_key = bytes.fromhex(input().strip()[2:])
        # 工作模式：加密1，解密0
        mode = int(input())
        # 调用AES类
        aes = AES(seed_key)
        if mode == 1:
            while n:
                text = bytes.fromhex(aes.encryption(text).hex())
                n -= 1
            print("0x" + text.hex(), end='')
            print('')
        elif mode == 0:
            while n:
                text = bytes.fromhex(aes.decryption(text).hex())
                n -= 1
            print("0x" + text.hex(), end='')
            print('')


if __name__ == '__main__':
    config = Config()
    config.trace_filter = GlobbingFilter(exclude=[
        'codecs.*',
        '<*',
        'FileFinder.*',
        'ModuleLockManager.*',
        'SourceFilLoader.*'
    ])
    graphviz = GraphvizOutput()
    graphviz.output_file = 'e.png'
    with PyCallGraph(output=graphviz, config=config):
        entrance()

